
================================================  Reference Links =============================================================

	Project Content : https://a-team.global/blog/iot-based-gps-tracking-software/


	https://circuitdigest.com/microcontroller-projects/iot-based-gps-location-tracker-using-nodemcu-track-and-save-gps-location-on-google-maps

	https://circuitdigest.com/microcontroller-projects/interfacing-gps-with-nodemcu-esp12

	https://www.electronicwings.com/nodemcu/gps-module-interfacing-with-nodemcu

	https://circuitdigest.com/microcontroller-projects/interfacing-stm32f103c8-with-gps-module-to-track-location-coordinates

================================================  Outlook Test Mail =============================================================

	Username : test_2023_0987@outlook.com
	Password : Cricket@001

================================================  React =============================================================

	Learn Doc : https://legacy.reactjs.org/docs/create-a-new-react-app.html

	React App Design ( https://create-react-app.dev/docs/getting-started/ )

	Dockerization for React App : https://www.geeksforgeeks.org/how-to-dockerize-a-reactjs-app/

	Prerequites : 
	1. Youâ€™ll need to have Node >= 14 on your local development machine 
		https://github.com/coreybutler/nvm-windows/releases

		Install Node and Verify using below command
		
		node -v


	App Building steps

	1. Create React App

		npx create-react-app my-app
		
	2. Go inside the App Folder 
	   
		npm start  ( To start the application )
		
	3. To run the app

		npm run build ( To Build application)


	#############  Map Implementation

	npm i react-leaflet

	https://github.com/googlemaps/extended-component-library



===========================   Docker Image 

	Ref : https://www.section.io/engineering-education/build-and-dockerize-a-full-stack-react-app-with-nodejs-and-nginx/

	FROM node:alpine
	WORKDIR /app
	COPY package.json ./
	COPY package-lock.json ./
	COPY ./ ./
	RUN npm i
	CMD ["npm", "run", "start"]

	1. docker build -f Dockerfile -t iotintegrationui:latest .
	2. docker run -it -p 4001:3000 iotintegrationui:latest
	
===========================  Create Dotnet api in VS code  ===========================


	dotnet new webapi --name <Project.Name>

	https://learn.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-7.0&tabs=visual-studio-code

	dotnet run | dotnet restore | dotnet clean | dotnet build

	1. dotnet new webapi -o iotintegrationapi

	2. dotnet add package Microsoft.EntityFrameworkCore.InMemory

	3. dotnet add package Microsoft.Azure.Devices.Client

	4. dotnet add package Microsoft.Azure.Devices.Provisioning.Client --version 1.19.3

	5. dotnet add package Microsoft.Azure.Devices.Provisioning.Transport.Amqp --version 1.16.5

	6. dotnet add package Microsoft.Azure.Devices --version 2.0.0-preview005  ( Required Downgraded version)

	7. dotnet add package Azure.Messaging.EventHubs --version 5.9.2

	8. dotnet add package Microsoft.Extensions.Hosting --version 8.0.0-preview.5.23280.8

	9. dotnet add package Microsoft.Extensions.DependencyInjection --version 8.0.0-preview.5.23280.8
	
	10. dotnet add package Microsoft.Azure.EventHubs --version 4.3.2


===========================   Docker Image  WebAPI

	Ref : https://www.makeuseof.com/docker-image-dot-net-web-api/

	FROM mcr.microsoft.com/dotnet/aspnet:7.0 AS base
	WORKDIR /app
	EXPOSE 80
	EXPOSE 443

	FROM mcr.microsoft.com/dotnet/sdk:7.0 AS build
	WORKDIR /src
	COPY ["iotintegrationapi.csproj", "."]
	RUN dotnet restore "./iotintegrationapi.csproj"
	COPY . .
	WORKDIR "/src/."
	RUN dotnet build "iotintegrationapi.csproj" -c Release -o /app/build

	FROM build AS publish
	RUN dotnet publish "iotintegrationapi.csproj" -c Release -o /app/publish /p:UseAppHost=false

	FROM base AS final
	WORKDIR /app
	COPY --from=publish /app/publish .
	ENTRYPOINT ["dotnet", "iotintegrationapi.dll"]



	1. docker build -f Dockerfile -t iotintegrationapi:latest .
	2. docker run -it -p 4001:3000 iotintegrationapi:latest



===========================  Wokrer Service   ===========================

	Create Wokrer Service 

	dotnet new worker --name <Project.Name>

	Device Provision Service

	https://www.c-sharpcorner.com/article/registering-devices-with-iot-hub-device-provisioning-service/



=========================== Azure Messaging Routing ===========================

	https://www.c-sharpcorner.com/article/how-to-bulk-import-iot-devices-in-azure-iot-hub-using-c-sharp/






===========================   Docker Image For Worker Service ===========================

	Ref : https://www.section.io/engineering-education/build-and-dockerize-a-full-stack-react-app-with-nodejs-and-nginx/

	FROM mcr.microsoft.com/dotnet/runtime:7.0 AS base
	WORKDIR /app

	FROM mcr.microsoft.com/dotnet/sdk:7.0 AS build
	WORKDIR /src
	COPY ["iotintegrationconsumers.csproj", "."]
	RUN dotnet restore "./iotintegrationconsumers.csproj"
	COPY . .
	WORKDIR "/src/."
	RUN dotnet build "iotintegrationconsumers.csproj" -c Release -o /app/build

	FROM build AS publish
	RUN dotnet publish "iotintegrationconsumers.csproj" -c Release -o /app/publish /p:UseAppHost=false

	FROM base AS final
	WORKDIR /app
	COPY --from=publish /app/publish .
	ENTRYPOINT ["dotnet", "iotintegrationconsumers.dll"]


	1. docker build -f Dockerfile -t iotintegrationconsumers:latest .
	2. docker run -it iotintegrationconsumers:latest





============================== Container Registry Push AZ ========================================================

	1. Create Container Registry on azure

	Interactive Azure Client : az login --scope https://management.core.windows.net//.default

	1. az acr login --name excerciseazureservice.azurecr.io

	otherwise provide username password


		********************** Docker build done and image already created iotintegrationapi ************************
	 
	2. docker tag iotintegrationapi:latest excerciseazureservice.azurecr.io/iotintegrationapi:1

	3. docker Push excerciseazureservice.azurecr.io/iotintegrationapi:1


		********************** Docker build done and image already created iotintegrationconsumers ************************

	2. docker tag iotintegrationconsumers:latest excerciseazureservice.azurecr.io/iotintegrationconsumers:1

	3. docker Push excerciseazureservice.azurecr.io/iotintegrationconsumers:1


		********************** Docker build done and image already created iotintegrationui ************************

	2. docker tag iotintegrationui:latest excerciseazureservice.azurecr.io/iotintegrationui:1

	3. docker Push excerciseazureservice.azurecr.io/iotintegrationui:1



		**********************  Azure Login on CLI ********************** 

		-- Create Container registry on Azure
		-- Install Azure Client 

		az acr login --name excerciseregistry.azurecr.io

		Username : excerciseregistry
		Password 1 : hh1lZY/A596vsveepOdEpsnpn5PsHL85
		Password 2 : 4ogIPGKlqLFf9wusR=7IPLEH7q1f5K4w


		**********************  Docker Commands CLI ********************** 

			===>  Create Dockerfile
			docker build -t aspnetapp .

			===> Run Locally to verify 
			docker run -it --rm -p 5000:80 --name aspnetcore_sample aspnetapp

			===> Create Tag
			docker tag aspnetapp excerciseregistry/exercise_service_1:1
			
				OR
			
			docker tag aspnetapp excerciseregistry.azurecr.io/exercise_service_1:1
			
			===> Push Tag to registry
			docker push excerciseregistry/exercise_service_1:1
			
				OR
			
			docker push excerciseregistry.azurecr.io/exercise_service_1:1

		Once we pushed exercise_service_1 bucket will get generated in container registry


		**********************  Now we can pull image from anywhere & test application **********************  
			1. Login in container registry
			2. Docker pull excerciseregistry.azurecr.io/exercise_service_1:1
			3. docker run -it --rm -p 5000:80 --name excerciseregistry.azurecr.io/exercise_service_1:1




============================== AKS ========================================================

	Reference : https://learn.microsoft.com/en-us/azure/aks/learn/quick-kubernetes-deploy-portal?tabs=azure-cli
	
	
	
=============================== Mongo =====================================================

docker pull mongo
	